@namespace MASA.Blazor.Pro.Demo
@using MASA.Blazor.Pro.Data.User;

<MNavigationDrawer Temporary Absolute Right Value=Visible ValueChanged=ValueChanged Width="420">
    <MToolbar Dense Elevation=0 Color="grey lighten-3">
        <span>Add New User</span>
        <MSpacer></MSpacer>
        <MButton Small Icon OnClick="()=>Visible=false">
            <MIcon Small>fas fa-times</MIcon>
        </MButton>
    </MToolbar>
    <MForm Model=_userData EnableDataAnnotationsValidation>
        <MTextField @bind-Value="_userData.FullName" Label="FullName" Dense Outlined TValue="string" Class="mx-5 mt-6" />
        <MTextField @bind-Value="_userData.UserName" Label="UserName" Dense Outlined TValue="string" Class="mx-5" />
        <MTextField @bind-Value="_userData.Email" Label="Email" Dense Outlined TValue="string" Class="mx-5" />
        <MTextField @bind-Value="_userData.Contact" Label="Contact" Dense Outlined TValue="string" Class="mx-5" />
        <MTextField @bind-Value="_userData.Company" Label="Company" Dense Outlined TValue="string" Class="mx-5" />
        <MTextField @bind-Value="_userData.Country" Label="Country" Dense Outlined TValue="string" Class="mx-5" />
        <MSelect Class="mx-5" Dense Outlined Label="Assignee" @bind-Value=_userData.Role
                 TItem="string" TValue="string" TItemValue="string"
                 Items=@UserService.Roles ItemText="r => r" ItemValue="r => r">
        </MSelect>
        <MSelect Class="mx-5" Dense Outlined Label="Assignee" @bind-Value=_userData.Plan
                 TItem="string" TValue="string" TItemValue="string"
                 Items=@UserService.Plans ItemText="p => p" ItemValue="p => p">
        </MSelect>

        <MRow NoGutters Justify="JustifyTypes.Start" Class="ml-5">
            <MButton Color="#7367f0" Dark OnClick="async ()=> await AddData(context)"> Add </MButton>
            <MButton Outlined Class="ml-5" OnClick="async() => await UpdateVisible(false)"> Cancel </MButton>
        </MRow>
    </MForm>
</MNavigationDrawer>

@code {
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public Action<UserData> Submit { get; set; }

    UserData _userData = new UserData();

    protected override void OnParametersSet()
    {
       _userData= new UserData();
    }

    async Task UpdateVisible(bool visible)
    {
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(visible);
        }
        else
        {
            Visible = visible;
        }
    }

    async Task AddData(EditContext context)
    {
        if (context.Validate())
        {
            Submit(_userData);

            await UpdateVisible(false);
        }
    }
}
