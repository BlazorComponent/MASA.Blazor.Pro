@using MASA.Blazor.Pro.Data

<MNavigationDrawer Fixed Temporary Right Value=Value ValueChanged=ValueChanged Width="465">
    <MToolbar Elevation=0 Class="px-6">
        @if (_isEdit)
        {
            <MButton Dark OnClick="() => _selectData.IsCompleted = !_selectData.IsCompleted" Color=@CompletedColor>
                @CompletedText
            </MButton>
        }
        else
        {
            <span>Add Task</span>
        }
        <MSpacer></MSpacer>
        @if (_isEdit)
        {
            <MButton Icon>
                <MIcon>mdi-delete-outline</MIcon>
            </MButton>
        }
        <MButton Icon OnClick="() => _selectData.IsImportant = !_selectData.IsImportant">
            @if (_selectData.IsImportant)
            {
                <MIcon Color="orange">mdi-star</MIcon>
            }
            else
            {
                <MIcon Color="orange">mdi-star-outline</MIcon>
            }
        </MButton>
        <MButton Icon OnClick="HideNavigationDrawer">
            <MIcon>mdi-close</MIcon>
        </MButton>
    </MToolbar>
    <MForm Model="_selectData" EnableDataAnnotationsValidation>
        <MTextField Class="mx-6 mt-6" @bind-Value=_selectData.Title Label="Title" Outlined Clearable></MTextField>

        <MSelect Class="mx-6" Outlined Label="Assignee" @bind-Value=_selectData.Assignee
                 TItem="SelectData" TValue="string" TItemValue="string"
                 Items=@_assList ItemText="i => i.Label" ItemValue="i => i.Value">
        </MSelect>

        <div class="mx-6">
            <MMenu CloseOnContentClick="true" NudgeRight="40" Transition="scale-transition" OffsetY MinWidth="@("auto")">
                <ActivatorContent Context="menuContext">
                    <MTextField @bind-Value=_selectData.DueDate Label="Due Date" Outlined Placeholder="Due Date" @attributes="menuContext.Attrs"></MTextField>
                </ActivatorContent>
                <ChildContent>
                    <MDatePicker @bind-Value=_selectData.DueDate></MDatePicker>
                </ChildContent>
            </MMenu>
        </div>

        <MSelect Class="mx-6" SmallChips Outlined Label="Tag" Multiple Value=_selectData.Tag
                 TItem="SelectData" TValue="List<string>" TItemValue="string"
                 Items=@_tagList ItemText="i => i.Label" ItemValue="i => i.Value">
            <SelectionContent Context="_context">
                <MChip Style="height:32px;border-radius:32px;" Outlined Close CloseIcon="mdi-close" OnCloseClick="()=>HandleCloseClick(_context.Item.Label)">@_context.Item.Label</MChip>
            </SelectionContent>
        </MSelect>

        <MTextarea Class="mx-6" Outlined Label="Description" @bind-Value=_selectData.Description></MTextarea>

        <MRow NoGutters Justify="JustifyTypes.Start" Class="ml-5">
            @if (_isEdit)
            {
                <MButton Color="#7367f0" Dark OnClick="()=>Update(context)">Update</MButton>
            }
            else
            {
                <MButton Color="#7367f0" Dark OnClick="()=>Add(context)">Add</MButton>
            }
            <MButton Outlined Class="ml-5" OnClick="Reset">Reset</MButton>
        </MRow>
    </MForm>
</MNavigationDrawer>

@code {
    public class SelectData
    {
        public string Label { get; set; } = default!;
        public string Value { get; set; } = default!;
    }

    private bool _isEdit;
    private TodoData _selectData = new TodoData();
    private List<SelectData> _tagList = new List<SelectData>
    {
        new SelectData() { Label = "Team", Value = "Team" },
        new SelectData() { Label = "Low", Value = "Low" },
        new SelectData() { Label = "Medium", Value = "Medium" },
        new SelectData() { Label = "High", Value = "High" },
        new SelectData() { Label = "Update", Value = "Update" }
    };
    private List<SelectData> _assList = new()
        {
            new SelectData() { Label = "紫萱", Value = "紫萱" },
            new SelectData() { Label = "若芹", Value = "若芹" },
            new SelectData() { Label = "思菱", Value = "思菱" },
            new SelectData() { Label = "向秋", Value = "向秋" },
            new SelectData() { Label = "雨珍", Value = "雨珍" },
            new SelectData() { Label = "海瑶", Value = "海瑶" },
            new SelectData() { Label = "乐萱", Value = "乐萱" },
        };

    private string CompletedColor { get { return _selectData.IsCompleted ? "pry" : "grey"; } }

    private string CompletedText { get { return _selectData.IsCompleted ? "Mark Complete" : "Completed"; } }

    [CascadingParameter]
    public TodoList TodoList { get; set; } = default!;

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public TodoData SelectItem { get; set; } = new TodoData();

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    private async Task HideNavigationDrawer()
    {
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(false);
        }
    }

    private void HandleCloseClick(string lable)
    {
        _selectData.Tag.Remove(lable);
    }

    protected override void OnParametersSet()
    {
        if (SelectItem == null)
        {
            SelectItem = new TodoData();
            _isEdit = false;
        }
        else
        {
            _isEdit = true;
        }

        _selectData = new TodoData
            {
                Id = SelectItem.Id,
                IsChecked = SelectItem.IsChecked,
                Assignee = SelectItem.Assignee,
                Avatar = SelectItem.Avatar,
                Description = SelectItem.Description,
                IsCompleted = SelectItem.IsCompleted,
                IsDeleted = SelectItem.IsDeleted,
                IsImportant = SelectItem.IsImportant,
                DueDate = SelectItem.DueDate,
                Tag = SelectItem.Tag,
                Title = SelectItem.Title
            };
    }

    private async Task Add(EditContext context)
    {
        var success = context.Validate();
        if (success)
        {
            SelectItem.Id = TodoService.List.Count + 1;
            TodoService.List.Insert(0, SelectItem);

            await HideNavigationDrawer();
        }
    }

    private async Task Update(EditContext context)
    {
        var success = context.Validate();
        if (success)
        {
            var data = (TodoData)context.Model;
            data.IsChecked = data.IsCompleted;
            TodoList.UpdateData(data);
            await HideNavigationDrawer();
        }
    }

    private void Reset()
    {
        _selectData = new TodoData
            {
                Id = SelectItem.Id,
                IsChecked = SelectItem.IsChecked,
                Assignee = SelectItem.Assignee,
                Avatar = SelectItem.Avatar,
                Description = SelectItem.Description,
                IsCompleted = SelectItem.IsCompleted,
                IsDeleted = SelectItem.IsDeleted,
                IsImportant = SelectItem.IsImportant,
                DueDate = SelectItem.DueDate,
                Tag = SelectItem.Tag,
                Title = SelectItem.Title
            };
    }
}
