@inherits LayoutComponentBase
@inject I18n LanguageProvider
@inject GlobalConfigs GlobalConfig
@inject NavigationManager NavigationManager

<MApp>

    <MAppBar App Style="padding-left:256px" Elevation=0 Class="my-4">
        <MToolbar Class="mx-2" Elevation=2>
            <MAppBarNavIcon></MAppBarNavIcon>
            @*<MToolbarTitle>@GlobalVariables.Title</MToolbarTitle>*@
            <MSpacer></MSpacer>

            <MMenu OffsetY Bottom>
                <ActivatorContent>
                    <MChip Label Color="white" @attributes="@context.Attrs">
                        @_currentLanguageOption?.Text
                    </MChip>

                </ActivatorContent>
                <ChildContent>
                    <MList>
                        @foreach (var option in _languageOptions)
                        {
                            <MListItem Link OnClick="()=> OnLanguageChange(option)">
                                <MListItemContent>
                                    <MListItemTitle>
                                        @option.Text
                                    </MListItemTitle>
                                </MListItemContent>
                            </MListItem>
                        }
                    </MList>
                </ChildContent>
            </MMenu>

            <MButton Icon>
                <MIcon>mdi-magnify</MIcon>
            </MButton>

            <Login />
        </MToolbar>
    </MAppBar>

    <MNavigationDrawer App>
        <Navigation/>
    </MNavigationDrawer>

    <MMain Style="padding-left:268px;padding-top:90px;padding-right:12px; background-color:rgb(245, 245, 245)">
        <MContainer Fluid>
           @* <MBreadcrumbs Linkage Items=GetCurrentBreadcrumbItems()></MBreadcrumbs>*@
            @Body
        </MContainer>
    </MMain>

</MApp>

@code {
    List<LanguageOption> _languageOptions = new List<LanguageOption>
    {
        new LanguageOption("简体中文","zh-CN",""),
        new LanguageOption("English","en-US",""),
    };

    LanguageOption? _currentLanguageOption;
    List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>();

    protected override void OnInitialized()
    {
        _currentLanguageOption = _languageOptions.FirstOrDefault(o => o.Value == (GlobalConfig.Language ?? LanguageProvider.CurrentLanguage));
        LanguageProvider.SetLang(_currentLanguageOption?.Value ?? LanguageProvider.CurrentLanguage);         
    }

    void OnLanguageChange(LanguageOption option)
    {
        _currentLanguageOption = option;
        LanguageProvider.SetLang(option.Value);
        GlobalConfig.Language = option.Value;
        GlobalConfig.SaveChanges();
    }

    List<BreadcrumbItem> GetCurrentBreadcrumbItems()
    {
        string route = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "");
        if (route == "") route = GlobalVariables.DefaultRoute;

        return route.Split("/").Select(v =>new BreadcrumbItem { Text=v,Href=v } ).ToList();
    }

    class LanguageOption
    {
        public LanguageOption(string text, string value, string img) => (Text, Value, Img) = (text, value, img);

        public string Text { get; set; }

        public string Value { get; set; }

        public string Img { get; set; }
    }
}