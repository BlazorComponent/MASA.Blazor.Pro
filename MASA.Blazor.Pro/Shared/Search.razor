@inherits DemoCompontentBase
@inject NavigationManager Nav
@inject List<NavCategory> NavCategorys

@{
    var navs = GetNavs(_search);
}
<MMenu OffsetY Bottom Right CloseOnContentClick="false" Value="@(_search!=null)" MinWidth=340>
    <ActivatorContent>
        <div @attributes="@context.Attrs" style="width:340px;height:40px;">
            <MTextField @bind-Value="_search" Class="rounded-2" Flat Dense Solo BackgroundColor="fill-lighten-1" Placeholder="Search">
                <PrependInnerContent>
                    <MIcon Size=16 Class="mr-2 neutral-lighten-1--text">mdi-magnify</MIcon>
                </PrependInnerContent>
            </MTextField>
        </div>
    </ActivatorContent>
    <ChildContent>
        @if(navs.Count>0)
        {
           <MList>
                @foreach (var nav in navs)
                {
                    <MListItem OnClick="()=>NavigateToSearchMenu(nav.Href)">
                        <MListItemAction>
                            <MIcon Size=20 Color="neutral-lighten-4">@nav.ParentIcon</MIcon>
                        </MListItemAction>
                        <MListItemContent>
                            <span Class="text-btn">@GetI18nFullTitle(nav.FullTitle)</span>
                        </MListItemContent>
                    </MListItem>
                }
            </MList>
        }
        else if(string.IsNullOrEmpty(_search) is false)
        {
            <MCard Class="text-center">
                <MCardText>
                      <span class="text-btn">No data available</span>
                </MCardText>
            </MCard>
        }

    </ChildContent>
</MMenu>


@code {
    string? _search;

    List<Nav> GetNavs(string? search)
    {
        var output = new List<Nav>();
        var navs = NavCategorys.SelectMany(nc => nc.Navs);
        if (search is not null && search!="")
        {
            foreach (var nav in navs)
            {
                if (T(nav.Title).Contains(search,StringComparison.OrdinalIgnoreCase))
                {
                    if (nav.Href is not null) output.Add(nav);
                    if(nav.Childs is not null) output.AddRange(nav.Childs);
                } 
                else if(nav.Childs is not null)
                {
                    var searchNavs = nav.Childs.Where(n=>T(n.FullTitle).Contains(search,StringComparison.OrdinalIgnoreCase));
                    output.AddRange(searchNavs);
                }
            }
        }
        return output;
    }

    void NavigateToSearchMenu(string href)
    {
        Nav.NavigateTo(href);
    }

    string GetI18nFullTitle(string fullTitle)
    {
        var arr = fullTitle.Split(' ').ToList();
        if (arr.Count == 1) return T(fullTitle);
        else
        {
            var parent = arr[0];
            arr.RemoveAt(0);
            return $"{T(parent)} {T(string.Join(' ',arr))}";
        }
    }

    public override string Name => nameof(Search);
}
