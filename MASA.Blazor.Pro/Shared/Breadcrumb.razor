@inherits ProCompontentBase
@inject NavigationManager NavigationManager
@inject NavHelper NavHelper
@inject GlobalConfigChangedEvent GlobalConfigChangedEvent
@implements IDisposable

@{
    var items = GetBreadcrumbItems();
}
@if (items.Count > 0)
{
    <div class="d-flex block-center pb-6 pt-1">
        <div class="text-subtitle">
            @items.Last().Text
        </div>

        <div class="mx-4 border-solid" style="height:16px;width:0.5px;"/>

        <MBreadcrumbs @key="@(Guid.NewGuid())" Linkage Class="pa-0">
            <DividerContent>
                <MIcon Small>mdi-chevron-right</MIcon>
            </DividerContent>
            <ChildContent>
                <MBreadcrumbsItem Href="@GlobalVariables.DefaultRoute">
                    <MIcon Small Color="primary">fas fa-home</MIcon>
                </MBreadcrumbsItem>
                @foreach (var item in items)
                {
                    <MBreadcrumbsItem Href="@item.Href">@item.Text</MBreadcrumbsItem>
                }
            </ChildContent>
        </MBreadcrumbs>
    </div>
}


@code {
    public override string Name { get; } = "Breadcrumb";

    protected override void OnInitialized()
    {
        GlobalConfigChangedEvent.OnGlobalConfigChanged += base.StateHasChanged;
    }

    private List<BreadcrumbItem> GetBreadcrumbItems()
    {
        var items = new List<BreadcrumbItem>();
        var currentNav = NavHelper.SameLevelNavs.FirstOrDefault(n => n.Href is not null && NavigationManager.Uri.Contains(n.Href));
        if (currentNav is not null)
        {
            if (currentNav.ParentId != 0)
            {
                var parentNav = NavHelper.SameLevelNavs.First(n => n.Id == currentNav.ParentId);
                items.Add(new BreadcrumbItem { Text = T(parentNav.Title), Href = parentNav.Href ?? parentNav.Children?.FirstOrDefault()?.Href??"" });
            }
            items.Add(new BreadcrumbItem { Text = T(currentNav.Title), Href = currentNav.Href });
            items.Last().Href = currentNav.Href;
        }
        return items;
    }

    public void Dispose()
    {
        GlobalConfigChangedEvent.OnGlobalConfigChanged -= base.StateHasChanged;
    }
}