@inherits DemoCompontentBase
@inject NavigationManager Nav
@inject List<NavCategory> NavCategorys

<div class="ml-10">
    @foreach(var menu in GetKeepMenus())
    {
         <MTooltip Color="primary" Bottom>
            <ActivatorContent>
                 <MIcon @attributes="@context.Attrs" Size=20  Class="mr-8" Color="neutral-lighten-4" OnClick="()=>NavigateToKeepMenu(menu.Href)">@menu.ParentIcon</MIcon>
            </ActivatorContent>
            <ChildContent>
                <span>@GetI18nFullTitle(menu.FullTitle)</span>
            </ChildContent>
        </MTooltip>
    }
    <MMenu OffsetY Bottom Right CloseOnContentClick="false" MinWidth="@("auto")">
        <ActivatorContent>
            <MIcon @attributes="@context.Attrs" Size=20 Color="neutral-lighten-4">mdi-heart-outline</MIcon>
        </ActivatorContent>
        <ChildContent>
            <MCard>
                <MCardText>
                    <MTextField @bind-Value="_search" Class="rounded-2" Flat Dense Solo BackgroundColor="fill-lighten-1" Placeholder="Search"></MTextField>
                    <MList>
                        @foreach (var nav in GetNavs(_search))
                        {
                            <MListItem OnClick="()=>NavigateToKeepMenu(nav.Href)" Class="px-0">
                                <MListItemAction Class="mr-2">
                                     <MIcon Size=20 Color="neutral-lighten-4">@nav.ParentIcon</MIcon>
                                </MListItemAction>
                                <MListItemContent>
                                    <span Class="text-btn">@GetI18nFullTitle(nav.FullTitle)</span>
                                </MListItemContent>
                                <MListItemAvatar>
                                        <MIcon Size=20 Color="neutral-lighten-4" Class="mr-n4" OnClick="()=>AddOrRemoveKeepMenu(nav.Id)">
                                            @(_keepMenus.Contains(nav.Id)?" mdi-heart":"mdi-heart-outline")                                         
                                        </MIcon>
                                </MListItemAvatar>
                            </MListItem>
                        }                 
                    </MList>
                </MCardText>
            </MCard>
        </ChildContent>
    </MMenu>
</div>

@code {
    List<int> _keepMenus = new List<int> {5,2,15};
    string? _search;

    List<Nav> GetNavs(string? search)
    {
        var output = new List<Nav>();      
        var navs = NavCategorys.SelectMany(nc => nc.Navs);

        if (search is null || search=="")
        {
            output.AddRange(navs.Where(n=>_keepMenus.Contains(n.Id)));
            output.AddRange(navs.Where(n=>n.Childs is not null).SelectMany(n=>n.Childs!).Where(n => _keepMenus.Contains(n.Id)));
        }
        else
        {        
            foreach (var nav in navs)
            {
                if (T(nav.Title).ToUpper().Contains(search.ToUpper()))
                {
                    if (nav.Href is not null) output.Add(nav);
                    if(nav.Childs is not null) output.AddRange(nav.Childs);
                } 
                else if(nav.Childs is not null)
                {
                    var searchNavs = nav.Childs.Where(n=>T(n.FullTitle).ToUpper().Contains(search.ToUpper()));
                    output.AddRange(searchNavs);
                }
            }
        }

        return output;
    }

    List<Nav> GetKeepMenus() => GetNavs(null);

    void NavigateToKeepMenu(string href)
    {
        Nav.NavigateTo(href);
    }

    void AddOrRemoveKeepMenu(int id)
    {
        if (_keepMenus.Contains(id)) _keepMenus.Remove(id);
        else _keepMenus.Add(id);
    }

    string GetI18nFullTitle(string fullTitle)
    {
        var arr = fullTitle.Split(' ');
        if (arr.Length == 1) return T(fullTitle);
        else return $"{T(arr[0])} {T(arr[1])}";
    }

    public override string Name => nameof(Keep);
}
